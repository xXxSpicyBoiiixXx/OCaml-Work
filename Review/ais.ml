let header_msg = "## This file was automatically generated by REAGenT. 
## Place any manual annotations at the bottom of the file." 

let addl_annotations_msg = "## Place aditional annotations below this line." 

let total_passes = ref 0 

open Core 

type cons = Lt | Le | Eq | Ge | Gt 
type constype = Sum | Each 

let string_of_cons = function Lt -> "<" 
                            | Le -> "<="
                            | Eq -> "==" 
                            | Ge -> ">="
                            | Gt -> ">"

let string_of_type function Sum -> "sum"
                          | Each -> "each" 

let flowconspn ?(cons = Le) ?(typ = Sum) addr num =
        (total_passes := !total_passes +num;
                Printf.sprintf "flow %s: point(%s) %s %d;\n"
                        (string_of_type typ) 
                        addr 
                        (string_of_cons cons) 
                        num)

let flowconspp ?(cons = Eq) ?(typ = Sum) addr1 addr2 = 
        Printf.sprintf "flow %s: point(%s) %s point(%s);\n"
                (string_of_type tpy)
                addr1 
                (string_of_cons cons)
                addr2

let recbound funcname num = 
       Printf.sprintf "routine \"%s\" 
        { recursion bound: 0..%d; 
          obeys calling conventions: false; 
          preserves: reg(\"r8\"), reg  
